
import { ApplicationRef } from '@angular/core';
import { HttpEvent } from '@angular/common/http';
import { HttpHandler } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TransferState } from '@angular/platform-browser';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
export declare class StateTransferInitializerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StateTransferInitializerModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StateTransferInitializerModule>;
}

/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export declare class TransferHttpCacheModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TransferHttpCacheModule, never, [typeof ɵngcc1.BrowserTransferStateModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TransferHttpCacheModule>;
}


export declare function ɵnguniversal_modules_common_common_a(doc: Document): () => Promise<unknown>;

export declare class ɵTransferHttpCacheInterceptor implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private invalidateCacheEntry;
    private makeCacheKey;
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ɵTransferHttpCacheInterceptor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ɵTransferHttpCacheInterceptor>;
}

export { }

//# sourceMappingURL=common.d.ts.map