{"version":3,"file":"ng-mat-search-bar.js","sources":["../../src/app/ng-mat-search-bar/util/abstract-value-accessor.ts","../../src/app/ng-mat-search-bar/mat-search-bar/mat-search-bar.component.ts","../../src/app/ng-mat-search-bar/ng-mat-search-bar.module.ts","../../ng-mat-search-bar.ts"],"names":[],"mappings":"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","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\n\nexport abstract class AbstractControlValueAccessor<T>\n  implements ControlValueAccessor {\n  value: string;\n\n  /**\n   * Invoked when the model has been changed\n   */\n  onChange: (_: any) => void = (_: any) => {};\n  /**\n   * Invoked when the model has been touched\n   */\n  onTouched: () => void = () => {};\n  /**\n   * Method that is invoked on an update of a model.\n   */\n  updateChanges() {\n    this.onChange(this.value);\n  }\n\n  /**\n   * Writes a new item to the element.\n   * @param value the value\n   */\n  writeValue(value: string): void {\n    this.value = value;\n    this.updateChanges();\n  }\n\n  /**\n   * Registers a callback function that should be called when the control's value changes in the UI.\n   * @param fn\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a callback function that should be called when the control receives a blur event.\n   * @param fn\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger\n} from '@angular/animations';\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatAutocomplete } from '@angular/material/autocomplete';\n\nimport { AbstractControlValueAccessor } from '../util/abstract-value-accessor';\n\nexport enum DISPLAY_TYPE {\n  SIMPLE,\n  FORMCONTROL,\n  AUTOCOMPLETE,\n  FORMCONTROLANDAUTOCOMPLETE\n}\n\n@Component({\n  selector: 'mat-search-bar',\n  templateUrl: './mat-search-bar.component.html',\n  styleUrls: ['./mat-search-bar.component.scss'],\n  animations: [\n    trigger('slideInOut', [\n      state('true', style({ width: '*' })),\n      state('false', style({ width: '0' })),\n      transition('true => false', animate('300ms ease-in')),\n      transition('false => true', animate('300ms ease-out'))\n    ])\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchBarComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchBarComponent extends AbstractControlValueAccessor<string>\n  implements OnInit {\n  DISPLAY_TYPE = DISPLAY_TYPE;\n\n  @ViewChild('input') inputElement: ElementRef;\n\n  @Input() formControl: FormControl;\n  @Input() matAutocomplete: MatAutocomplete;\n  @Input() placeholder = '';\n\n  @Output() onBlur = new EventEmitter<string>();\n  @Output() onClose = new EventEmitter<void>();\n  @Output() onEnter = new EventEmitter<string>();\n  @Output() onFocus = new EventEmitter<string>();\n  @Output() onOpen = new EventEmitter<void>();\n\n  mode: DISPLAY_TYPE;\n  searchVisible = false;\n\n  ngOnInit() {\n    if (!this.formControl && !this.matAutocomplete)\n      this.mode = DISPLAY_TYPE.SIMPLE;\n    else if (this.formControl && this.matAutocomplete)\n      this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;\n    else if (this.formControl) this.mode = DISPLAY_TYPE.FORMCONTROL;\n    else if (this.matAutocomplete) this.mode = DISPLAY_TYPE.AUTOCOMPLETE;\n  }\n\n  public close(): void {\n    this.searchVisible = false;\n    this.value = '';\n    this.updateChanges();\n    this.onClose.emit();\n  }\n\n  public open(): void {\n    this.searchVisible = true;\n    this.inputElement.nativeElement.focus();\n    this.onOpen.emit();\n  }\n\n  onBlurring(searchValue: string) {\n    if (!searchValue) {\n      this.searchVisible = false;\n    }\n    this.onBlur.emit(searchValue);\n  }\n\n  onEnterring(searchValue: string) {\n    this.onEnter.emit(searchValue);\n  }\n\n  onFocussing(searchValue: string) {\n    this.onFocus.emit(searchValue);\n  }\n}\n","import { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatInputModule } from \"@angular/material/input\";\n\nimport { MatSearchBarComponent } from \"./mat-search-bar/mat-search-bar.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    MatInputModule,\n    MatRippleModule,\n\n    //Reactive form\n    ReactiveFormsModule\n  ],\n  exports: [MatSearchBarComponent],\n  declarations: [MatSearchBarComponent]\n})\nexport class NgMatSearchBarModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MatSearchBarComponent as Éµa} from './src/app/ng-mat-search-bar/mat-search-bar/mat-search-bar.component';\nexport {AbstractControlValueAccessor as Éµb} from './src/app/ng-mat-search-bar/util/abstract-value-accessor';"]}