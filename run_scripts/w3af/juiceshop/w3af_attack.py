#!/usr/bin/python3

import subprocess
import os

# First the profile sitemap is run to create site framework
subprocess.call('profiles', shell=True)
subprocess.call('use sitemap', shell=True)
subprocess.call('back', shell=True)

#Output reports to html,txt and export_requests so they can be used for fuzzing
subprocess.call('plugins', shell=True)
subprocess.call('output html_file text_file export_requests', shell=True)
subprocess.call('back', shell=True)

# set target, os and framework
subprocess.call('target', shell=True)
subprocess.call('set target http://localhost:3000/', shell=True)
subprocess.call('set target_framework java', shell=True)
subprocess.call('set target_os unix', shell=True)
subprocess.call('back', shell=True)

#run sitemap
subprocess.call('start', shell=True)

#Each time a scan is run only the exploits will be saved
#So settings need to be configured again each time
subprocess.call('cleanup', shell=True)

# Use the profile OWASP_TOP10 to fuzz and configure plugins
subprocess.call('profiles', shell=True)
subprocess.call('use OWASP_TOP10', shell=True)
subprocess.call('back', shell=True)

#As the sitemap has already crawled the app, there's no need to run a crawl again
#The dir for export_requests normally saves in the parent to the w3af dir
subprocess.call('plugins', shell=True)
subprocess.call('crawl !all', shell=True)
subprocess.call('crawl import_results', shell=True)
subprocess.call('crawl config import_results', shell=True)

 #access config for  import_results
 #selects the export_request file that was generated by sitemap
subprocess.call('set input_base64 /home/kali/output-requests.b64', shell=True)
subprocess.call('back', shell=True)

#back in plugins
subprocess.call('output html_file text_file export_requests', shell=True)
subprocess.call('back', shell=True)

#in home menu
#setup target
subprocess.call('target', shell=True)
subprocess.call('set target http://localhost:3000/', shell=True)
subprocess.call('set target_framework java', shell=True)
subprocess.call('set target_os unix', shell=True)
subprocess.call('back', shell=True)

#start attack
subprocess.call('start', shell=True)

#exit w3af
subprocess.call('exit', shell=True)
subprocess.call('exit', shell=True)