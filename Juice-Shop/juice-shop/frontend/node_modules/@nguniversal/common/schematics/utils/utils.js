/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/schematics/utils/utils", ["require", "exports", "@angular-devkit/schematics", "@schematics/angular/utility/workspace", "typescript"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addInitialNavigation = exports.getImportOfIdentifier = exports.findImport = exports.getOutputPath = exports.stripTsExtension = exports.getProject = void 0;
    const schematics_1 = require("@angular-devkit/schematics");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    const ts = require("typescript");
    function getProject(host, projectName) {
        return __awaiter(this, void 0, void 0, function* () {
            const workspace = yield workspace_1.getWorkspace(host);
            const project = workspace.projects.get(projectName);
            if (!project || project.extensions.projectType !== 'application') {
                throw new schematics_1.SchematicsException(`Universal requires a project type of 'application'.`);
            }
            return project;
        });
    }
    exports.getProject = getProject;
    function stripTsExtension(file) {
        return file.replace(/\.ts$/, '');
    }
    exports.stripTsExtension = stripTsExtension;
    function getOutputPath(host, projectName, target) {
        return __awaiter(this, void 0, void 0, function* () {
            // Generate new output paths
            const project = yield getProject(host, projectName);
            const serverTarget = project.targets.get(target);
            if (!serverTarget || !serverTarget.options) {
                throw new schematics_1.SchematicsException(`Cannot find 'options' for ${projectName} ${target} target.`);
            }
            const { outputPath } = serverTarget.options;
            if (typeof outputPath !== 'string') {
                throw new schematics_1.SchematicsException(`outputPath for ${projectName} ${target} target is not a string.`);
            }
            return outputPath;
        });
    }
    exports.getOutputPath = getOutputPath;
    function findImport(sourceFile, moduleName, symbolName) {
        // Only look through the top-level imports.
        for (const node of sourceFile.statements) {
            if (!ts.isImportDeclaration(node) || !ts.isStringLiteral(node.moduleSpecifier) ||
                node.moduleSpecifier.text !== moduleName) {
                continue;
            }
            const namedBindings = node.importClause && node.importClause.namedBindings;
            if (!namedBindings || !ts.isNamedImports(namedBindings)) {
                continue;
            }
            if (namedBindings.elements.some(element => element.name.text === symbolName)) {
                return namedBindings;
            }
        }
        return null;
    }
    exports.findImport = findImport;
    /** Gets import information about the specified identifier by using the Type checker. */
    function getImportOfIdentifier(typeChecker, node) {
        const symbol = typeChecker.getSymbolAtLocation(node);
        if (!symbol || !symbol.declarations.length) {
            return null;
        }
        const decl = symbol.declarations[0];
        if (!ts.isImportSpecifier(decl)) {
            return null;
        }
        const importDecl = decl.parent.parent.parent;
        if (!ts.isStringLiteral(importDecl.moduleSpecifier)) {
            return null;
        }
        return {
            // Handles aliased imports: e.g. "import {Component as myComp} from ...";
            name: decl.propertyName ? decl.propertyName.text : decl.name.text,
            importModule: importDecl.moduleSpecifier.text,
            node: importDecl
        };
    }
    exports.getImportOfIdentifier = getImportOfIdentifier;
    function addInitialNavigation(node) {
        const existingOptions = node.arguments[1];
        // If the user has explicitly set initialNavigation, we respect that
        if (existingOptions && existingOptions.properties.some(exp => ts.isPropertyAssignment(exp) && ts.isIdentifier(exp.name) &&
            exp.name.text === 'initialNavigation')) {
            return node;
        }
        const enabledLiteral = ts.createStringLiteral('enabled');
        // TypeScript will emit the Node with double quotes.
        // In schematics we usually write code with a single quotes
        // tslint:disable-next-line: no-any
        enabledLiteral.singleQuote = true;
        const initialNavigationProperty = ts.createPropertyAssignment('initialNavigation', enabledLiteral);
        const routerOptions = existingOptions
            ? ts.updateObjectLiteral(existingOptions, ts.createNodeArray([
                ...existingOptions.properties,
                initialNavigationProperty
            ]))
            : ts.createObjectLiteral([initialNavigationProperty], true);
        const args = [node.arguments[0], routerOptions];
        return ts.createCall(node.expression, node.typeArguments, args);
    }
    exports.addInitialNavigation = addInitialNavigation;
});
//# sourceMappingURL=data:application/json;base64,