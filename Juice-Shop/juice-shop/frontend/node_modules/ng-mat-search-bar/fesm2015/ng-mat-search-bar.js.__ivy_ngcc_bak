import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { CommonModule } from '@angular/common';
import { EventEmitter, Component, forwardRef, ViewChild, Input, Output, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { trigger, state, style, transition, animate } from '@angular/animations';

class AbstractControlValueAccessor {
    constructor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = (_) => { };
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = () => { };
    }
    /**
     * Method that is invoked on an update of a model.
     */
    updateChanges() {
        this.onChange(this.value);
    }
    /**
     * Writes a new item to the element.
     * @param value the value
     */
    writeValue(value) {
        this.value = value;
        this.updateChanges();
    }
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param fn
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param fn
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}

var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.DISPLAY_TYPE = DISPLAY_TYPE;
        this.placeholder = '';
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    ngOnInit() {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    }
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
}
MatSearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-search-bar',
                template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
                animations: [
                    trigger('slideInOut', [
                        state('true', style({ width: '*' })),
                        state('false', style({ width: '0' })),
                        transition('true => false', animate('300ms ease-in')),
                        transition('false => true', animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSearchBarComponent),
                        multi: true
                    }
                ],
                styles: [":host{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"]
            },] }
];
MatSearchBarComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['input',] }],
    formControl: [{ type: Input }],
    matAutocomplete: [{ type: Input }],
    placeholder: [{ type: Input }],
    onBlur: [{ type: Output }],
    onClose: [{ type: Output }],
    onEnter: [{ type: Output }],
    onFocus: [{ type: Output }],
    onOpen: [{ type: Output }]
};

class NgMatSearchBarModule {
}
NgMatSearchBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    MatAutocompleteModule,
                    MatIconModule,
                    MatInputModule,
                    MatRippleModule,
                    //Reactive form
                    ReactiveFormsModule
                ],
                exports: [MatSearchBarComponent],
                declarations: [MatSearchBarComponent]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };
//# sourceMappingURL=ng-mat-search-bar.js.map
