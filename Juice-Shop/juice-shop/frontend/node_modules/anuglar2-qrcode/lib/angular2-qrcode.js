import { Component, ElementRef, Input, NgModule } from '@angular/core';
import QRious from 'qrious';

import * as ɵngcc0 from '@angular/core';
var QRCodeComponent = (function () {
    /**
     * @param {?} elementRef
     */
    function QRCodeComponent(elementRef) {
        this.elementRef = elementRef;
        this.background = 'white';
        this.backgroundAlpha = 1.0;
        this.foreground = 'black';
        this.foregroundAlpha = 1.0;
        this.level = 'L';
        this.mime = 'image/png';
        this.padding = null;
        this.size = 100;
        this.value = '';
        this.canvas = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    QRCodeComponent.prototype.ngOnChanges = function (changes) {
        if ('background' in changes ||
            'backgroundAlpha' in changes ||
            'foreground' in changes ||
            'foregroundAlpha' in changes ||
            'level' in changes ||
            'mime' in changes ||
            'padding' in changes ||
            'size' in changes ||
            'value' in changes ||
            'canvas' in changes) {
            this.generate();
        }
    };
    /**
     * @return {?}
     */
    QRCodeComponent.prototype.generate = function () {
        try {
            var /** @type {?} */ el = this.elementRef.nativeElement;
            el.innerHTML = '';
            var /** @type {?} */ qr = new QRious({
                background: this.background,
                backgroundAlpha: this.backgroundAlpha,
                foreground: this.foreground,
                foregroundAlpha: this.foregroundAlpha,
                level: this.level,
                mime: this.mime,
                padding: this.padding,
                size: this.size,
                value: this.value
            });
            if (this.canvas) {
                el.appendChild(qr.canvas);
            }
            else {
                el.appendChild(qr.image);
            }
        }
        catch (e) {
            console.error("Could not generate QR Code: " + e.message);
        }
    };
QRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) { return new (t || QRCodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
QRCodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QRCodeComponent, selectors: [["qr-code"]], inputs: { background: "background", backgroundAlpha: "backgroundAlpha", foreground: "foreground", foregroundAlpha: "foregroundAlpha", level: "level", mime: "mime", padding: "padding", size: "size", value: "value", canvas: "canvas" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QRCodeComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeComponent, [{
        type: Component,
        args: [{
                moduleId: 'module.id',
                selector: 'qr-code',
                template: ""
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { background: [{
            type: Input
        }], backgroundAlpha: [{
            type: Input
        }], foreground: [{
            type: Input
        }], foregroundAlpha: [{
            type: Input
        }], level: [{
            type: Input
        }], mime: [{
            type: Input
        }], padding: [{
            type: Input
        }], size: [{
            type: Input
        }], value: [{
            type: Input
        }], canvas: [{
            type: Input
        }] }); })();
    return QRCodeComponent;
}());
/**
 * @nocollapse
 */
QRCodeComponent.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
QRCodeComponent.propDecorators = {
    'background': [{ type: Input },],
    'backgroundAlpha': [{ type: Input },],
    'foreground': [{ type: Input },],
    'foregroundAlpha': [{ type: Input },],
    'level': [{ type: Input },],
    'mime': [{ type: Input },],
    'padding': [{ type: Input },],
    'size': [{ type: Input },],
    'value': [{ type: Input },],
    'canvas': [{ type: Input },],
};
var QRCodeModule = (function () {
    function QRCodeModule() {
    }
QRCodeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: QRCodeModule });
QRCodeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function QRCodeModule_Factory(t) { return new (t || QRCodeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QRCodeModule, { declarations: [QRCodeComponent], exports: [QRCodeComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeModule, [{
        type: NgModule,
        args: [{
                exports: [QRCodeComponent],
                declarations: [QRCodeComponent]
            }]
    }], function () { return []; }, null); })();
    return QRCodeModule;
}());
/**
 * @nocollapse
 */
QRCodeModule.ctorParameters = function () { return []; };

/**
 * Generated bundle index. Do not edit.
 */

export { QRCodeComponent, QRCodeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItcXJjb2RlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyMi1xcmNvZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBLEtBT0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Z0RBQUs7QUFDTDtBQUNBLEtBTUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgUVJpb3VzIGZyb20gJ3FyaW91cyc7XG5cbnZhciBRUkNvZGVDb21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRSZWZcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUVJDb2RlQ29tcG9uZW50KGVsZW1lbnRSZWYpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYgPSBlbGVtZW50UmVmO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9ICd3aGl0ZSc7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kQWxwaGEgPSAxLjA7XHJcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kID0gJ2JsYWNrJztcclxuICAgICAgICB0aGlzLmZvcmVncm91bmRBbHBoYSA9IDEuMDtcclxuICAgICAgICB0aGlzLmxldmVsID0gJ0wnO1xyXG4gICAgICAgIHRoaXMubWltZSA9ICdpbWFnZS9wbmcnO1xyXG4gICAgICAgIHRoaXMucGFkZGluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zaXplID0gMTAwO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gez99IGNoYW5nZXNcclxuICAgICAqIEByZXR1cm4gez99XHJcbiAgICAgKi9cclxuICAgIFFSQ29kZUNvbXBvbmVudC5wcm90b3R5cGUubmdPbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xyXG4gICAgICAgIGlmICgnYmFja2dyb3VuZCcgaW4gY2hhbmdlcyB8fFxyXG4gICAgICAgICAgICAnYmFja2dyb3VuZEFscGhhJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICdmb3JlZ3JvdW5kJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICdmb3JlZ3JvdW5kQWxwaGEnIGluIGNoYW5nZXMgfHxcclxuICAgICAgICAgICAgJ2xldmVsJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICdtaW1lJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICdwYWRkaW5nJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICdzaXplJyBpbiBjaGFuZ2VzIHx8XHJcbiAgICAgICAgICAgICd2YWx1ZScgaW4gY2hhbmdlcyB8fFxyXG4gICAgICAgICAgICAnY2FudmFzJyBpbiBjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/fVxyXG4gICAgICovXHJcbiAgICBRUkNvZGVDb21wb25lbnQucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBxciA9IG5ldyBRUmlvdXMoe1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdGhpcy5iYWNrZ3JvdW5kLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEFscGhhOiB0aGlzLmJhY2tncm91bmRBbHBoYSxcclxuICAgICAgICAgICAgICAgIGZvcmVncm91bmQ6IHRoaXMuZm9yZWdyb3VuZCxcclxuICAgICAgICAgICAgICAgIGZvcmVncm91bmRBbHBoYTogdGhpcy5mb3JlZ3JvdW5kQWxwaGEsXHJcbiAgICAgICAgICAgICAgICBsZXZlbDogdGhpcy5sZXZlbCxcclxuICAgICAgICAgICAgICAgIG1pbWU6IHRoaXMubWltZSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHRoaXMucGFkZGluZyxcclxuICAgICAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jYW52YXMpIHtcclxuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHFyLmNhbnZhcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChxci5pbWFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBnZW5lcmF0ZSBRUiBDb2RlOiBcIiArIGUubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBRUkNvZGVDb21wb25lbnQ7XHJcbn0oKSk7XHJcblFSQ29kZUNvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVJZDogJ21vZHVsZS5pZCcsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ3FyLWNvZGUnLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXCJcclxuICAgICAgICAgICAgfSxdIH0sXHJcbl07XHJcbi8qKlxyXG4gKiBAbm9jb2xsYXBzZVxyXG4gKi9cclxuUVJDb2RlQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xyXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxyXG5dOyB9O1xyXG5RUkNvZGVDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XHJcbiAgICAnYmFja2dyb3VuZCc6IFt7IHR5cGU6IElucHV0IH0sXSxcclxuICAgICdiYWNrZ3JvdW5kQWxwaGEnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICAnZm9yZWdyb3VuZCc6IFt7IHR5cGU6IElucHV0IH0sXSxcclxuICAgICdmb3JlZ3JvdW5kQWxwaGEnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICAnbGV2ZWwnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICAnbWltZSc6IFt7IHR5cGU6IElucHV0IH0sXSxcclxuICAgICdwYWRkaW5nJzogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG4gICAgJ3NpemUnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICAndmFsdWUnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXHJcbiAgICAnY2FudmFzJzogW3sgdHlwZTogSW5wdXQgfSxdLFxyXG59O1xyXG52YXIgUVJDb2RlTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFFSQ29kZU1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIHJldHVybiBRUkNvZGVNb2R1bGU7XHJcbn0oKSk7XHJcblFSQ29kZU1vZHVsZS5kZWNvcmF0b3JzID0gW1xyXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcclxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtRUkNvZGVDb21wb25lbnRdLFxyXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbUVJDb2RlQ29tcG9uZW50XVxyXG4gICAgICAgICAgICB9LF0gfSxcclxuXTtcclxuLyoqXHJcbiAqIEBub2NvbGxhcHNlXHJcbiAqL1xyXG5RUkNvZGVNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcblxuLyoqXHJcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxyXG4gKi9cblxuZXhwb3J0IHsgUVJDb2RlQ29tcG9uZW50LCBRUkNvZGVNb2R1bGUgfTtcbiJdfQ==