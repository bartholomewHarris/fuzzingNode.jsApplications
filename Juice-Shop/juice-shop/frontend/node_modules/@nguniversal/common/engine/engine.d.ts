
import { Compiler } from '@angular/core';
import { NgModuleFactory } from '@angular/core';
import { ResourceLoader } from '@angular/compiler';
import { StaticProvider } from '@angular/core';
import { Type } from '@angular/core';

/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export declare class ɵCommonEngine {
    private moduleOrFactory?;
    private providers;
    /** Return an instance of the platformServer compiler */
    getCompiler(): Compiler;
    private factoryCacheMap;
    private templateCache;
    constructor(moduleOrFactory?: Type<{}> | NgModuleFactory<{}> | undefined, providers?: StaticProvider[]);
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    render(opts: ɵRenderOptions): Promise<string>;
    /** Return the factory for a given engine instance */
    getFactory(moduleOrFactory: Type<{}> | NgModuleFactory<{}>): Promise<NgModuleFactory<{}>>;
    /** Retrieve the document from the cache or the filesystem */
    private getDocument;
}

/** ResourceLoader implementation for loading files */
export declare class ɵFileLoader implements ResourceLoader {
    get(url: string): Promise<string>;
}

/** These are the allowed options for the render */
export declare interface ɵRenderOptions {
    bootstrap: Type<{}> | NgModuleFactory<{}>;
    providers?: StaticProvider[];
    url?: string;
    document?: string;
    documentFilePath?: string;
}

export { }
