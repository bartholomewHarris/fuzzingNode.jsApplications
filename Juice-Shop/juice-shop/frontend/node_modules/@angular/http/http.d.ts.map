{"version":3,"file":"http.d.ts","sources":["http.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v8.0.0-beta.10+1.sha-a28b3e3\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Observable } from 'rxjs';\r\nimport { Version } from '@angular/core';\r\n\r\n/**\r\n * Subclass of {@link RequestOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * method: {@link RequestMethod RequestMethod.Get}\r\n *  * headers: empty {@link Headers} object\r\n *\r\n * This class could be extended and bound to the {@link RequestOptions} class\r\n * when configuring an {@link Injector}, in order to override the default options\r\n * used by {@link Http} to create and send {@link Request Requests}.\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\r\n *\r\n * class MyOptions extends BaseRequestOptions {\r\n *   search: string = 'coreTeam=true';\r\n * }\r\n *\r\n * {provide: RequestOptions, useClass: MyOptions};\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {@link Request}\r\n * object.\r\n *\r\n * ```\r\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new BaseRequestOptions();\r\n * const req = new Request(options.merge({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * }));\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // null\r\n * console.log('req.url:', req.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class BaseRequestOptions extends RequestOptions {\r\n    constructor();\r\n}\r\n\r\n/**\r\n * Subclass of {@link ResponseOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * status: 200\r\n *  * headers: empty {@link Headers} object\r\n *\r\n * This class could be extended and bound to the {@link ResponseOptions} class\r\n * when configuring an {@link Injector}, in order to override the default options\r\n * used by {@link Http} to create {@link Response Responses}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {provide} from '@angular/core';\r\n * import {bootstrap} from '@angular/platform-browser/browser';\r\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\r\n * '@angular/http';\r\n * import {App} from './myapp';\r\n *\r\n * class MyOptions extends BaseResponseOptions {\r\n *   headers:Headers = new Headers({network: 'github'});\r\n * }\r\n *\r\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {@link Response}\r\n * object.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {BaseResponseOptions, Response} from '@angular/http';\r\n *\r\n * var options = new BaseResponseOptions();\r\n * var res = new Response(options.merge({\r\n *   body: 'Angular',\r\n *   headers: new Headers({framework: 'angular'})\r\n * }));\r\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\r\n * console.log('res.text():', res.text()); // Angular;\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class BaseResponseOptions extends ResponseOptions {\r\n    constructor();\r\n}\r\n\r\n\r\n/**\r\n * A backend for http that uses the `XMLHttpRequest` browser API.\r\n *\r\n * Take care not to evaluate this in non-browser contexts.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class BrowserXhr {\r\n    constructor();\r\n    build(): any;\r\n}\r\n\r\n/**\r\n * Abstract class from which real connections are derived.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare abstract class Connection {\r\n    readyState: ReadyState;\r\n    request: Request;\r\n    response: any;\r\n}\r\n\r\n/**\r\n * Abstract class from which real backends are derived.\r\n *\r\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\r\n * {@link Request}.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare abstract class ConnectionBackend {\r\n    abstract createConnection(request: any): Connection;\r\n}\r\n\r\n/**\r\n * Supported content type to be automatically associated with a {@link Request}.\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\ndeclare enum ContentType {\r\n    NONE = 0,\r\n    JSON = 1,\r\n    FORM = 2,\r\n    FORM_DATA = 3,\r\n    TEXT = 4,\r\n    BLOB = 5,\r\n    ARRAY_BUFFER = 6\r\n}\r\n\r\n/**\r\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\r\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n * for more information on XSRF.\r\n *\r\n * Applications can configure custom cookie and header names by binding an instance of this class\r\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\r\n * details.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class CookieXSRFStrategy implements XSRFStrategy {\r\n    private _cookieName;\r\n    private _headerName;\r\n    constructor(_cookieName?: string, _headerName?: string);\r\n    configureRequest(req: Request): void;\r\n}\r\n\r\n\r\n/**\r\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\r\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\r\n *\r\n * The only known difference between this `Headers` implementation and the spec is the\r\n * lack of an `entries` method.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Headers} from '@angular/http';\r\n *\r\n * var firstHeaders = new Headers();\r\n * firstHeaders.append('Content-Type', 'image/jpeg');\r\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\r\n *\r\n * // Create headers from Plain Old JavaScript Object\r\n * var secondHeaders = new Headers({\r\n *   'X-My-Custom-Header': 'Angular'\r\n * });\r\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\r\n *\r\n * var thirdHeaders = new Headers(secondHeaders);\r\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class Headers {\r\n    constructor(headers?: Headers | {\r\n        [name: string]: any;\r\n    } | null);\r\n    /**\r\n     * Returns a new Headers instance from the given DOMString of Response Headers\r\n     */\r\n    static fromResponseHeaderString(headersString: string): Headers;\r\n    /**\r\n     * Appends a header to existing list of header values for a given header name.\r\n     */\r\n    append(name: string, value: string): void;\r\n    /**\r\n     * Deletes all header values for the given name.\r\n     */\r\n    delete(name: string): void;\r\n    forEach(fn: (values: string[], name: string | undefined, headers: Map<string, string[]>) => void): void;\r\n    /**\r\n     * Returns first header that matches given name.\r\n     */\r\n    get(name: string): string | null;\r\n    /**\r\n     * Checks for existence of header by given name.\r\n     */\r\n    has(name: string): boolean;\r\n    /**\r\n     * Returns the names of the headers\r\n     */\r\n    keys(): string[];\r\n    /**\r\n     * Sets or overrides header value for given name.\r\n     */\r\n    set(name: string, value: string | string[]): void;\r\n    /**\r\n     * Returns values of all headers.\r\n     */\r\n    values(): string[][];\r\n    /**\r\n     * Returns string of all headers.\r\n     */\r\n    toJSON(): {\r\n        [name: string]: any;\r\n    };\r\n    /**\r\n     * Returns list of header values for a given name.\r\n     */\r\n    getAll(name: string): string[] | null;\r\n    /**\r\n     * This method is not implemented.\r\n     */\r\n    entries(): void;\r\n    private mayBeSetNormalizedName;\r\n}\r\n\r\n/**\r\n * Performs http requests using `XMLHttpRequest` as the default backend.\r\n *\r\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\r\n * `request` returns an `Observable` which will emit a single {@link Response} when a\r\n * response is received.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\r\n * import {map} from 'rxjs/operators';\r\n *\r\n * @Component({\r\n *   selector: 'http-app',\r\n *   viewProviders: [HTTP_PROVIDERS],\r\n *   templateUrl: 'people.html'\r\n * })\r\n * class PeopleComponent {\r\n *   constructor(http: Http) {\r\n *     http.get('people.json')\r\n *       // Call map on the response observable to get the parsed people object\r\n *       .pipe(map(res => res.json()))\r\n *       // Subscribe to the observable to get the parsed people object and attach it to the\r\n *       // component\r\n *       .subscribe(people => this.people = people);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\r\n * ```\r\n *\r\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\r\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\r\n * the {@link XHRBackend} provider, as in the following example:\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, Http} from '@angular/http';\r\n * import {MockBackend} from '@angular/http/testing';\r\n * var injector = Injector.resolveAndCreate([\r\n *   BaseRequestOptions,\r\n *   MockBackend,\r\n *   {provide: Http, useFactory:\r\n *       function(backend, defaultOptions) {\r\n *         return new Http(backend, defaultOptions);\r\n *       },\r\n *       deps: [MockBackend, BaseRequestOptions]}\r\n * ]);\r\n * var http = injector.get(Http);\r\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class Http {\r\n    protected _backend: ConnectionBackend;\r\n    protected _defaultOptions: RequestOptions;\r\n    constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions);\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     */\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `get` http method.\r\n     */\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `post` http method.\r\n     */\r\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `put` http method.\r\n     */\r\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `delete` http method.\r\n     */\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `patch` http method.\r\n     */\r\n    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `head` http method.\r\n     */\r\n    head(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n    /**\r\n     * Performs a request with `options` http method.\r\n     */\r\n    options(url: string, options?: RequestOptionsArgs): Observable<Response>;\r\n}\r\n\r\n/**\r\n * The module that includes http's providers\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class HttpModule {\r\n}\r\n\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class Jsonp extends Http {\r\n    constructor(backend: ConnectionBackend, defaultOptions: RequestOptions);\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     *\r\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\r\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\r\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\r\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\r\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\r\n     * future security issues (e.g. content sniffing).  For more detail, see the\r\n     * [Security Guide](http://g.co/ng/security).\r\n     */\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response>;\r\n}\r\n\r\n/**\r\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class JSONPBackend extends ConnectionBackend {\r\n    private _browserJSONP;\r\n    private _baseResponseOptions;\r\n    createConnection(request: Request): JSONPConnection;\r\n}\r\n\r\n/**\r\n * Base class for an in-flight JSONP request.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class JSONPConnection implements Connection {\r\n    private _dom;\r\n    private baseResponseOptions?;\r\n    private _id;\r\n    private _script;\r\n    private _responseData;\r\n    private _finished;\r\n    /**\r\n     * The {@link ReadyState} of this request.\r\n     */\r\n    readyState: ReadyState;\r\n    /**\r\n     * The outgoing HTTP request.\r\n     */\r\n    request: Request;\r\n    /**\r\n     * An observable that completes with the response, when the request is finished.\r\n     */\r\n    response: Observable<Response>;\r\n    /**\r\n     * Callback called when the JSONP request completes, to notify the application\r\n     * of the new data.\r\n     */\r\n    finished(data?: any): void;\r\n}\r\n\r\n/**\r\n * The module that includes jsonp's providers\r\n *\r\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\r\n * @publicApi\r\n */\r\nexport declare class JsonpModule {\r\n}\r\n\r\n\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n **/\r\nexport declare class QueryEncoder {\r\n    encodeKey(key: string): string;\r\n    encodeValue(value: string): string;\r\n}\r\n\r\n/**\r\n * All possible states in which a connection can be, based on\r\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\r\n * additional \"CANCELLED\" state.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare enum ReadyState {\r\n    Unsent = 0,\r\n    Open = 1,\r\n    HeadersReceived = 2,\r\n    Loading = 3,\r\n    Done = 4,\r\n    Cancelled = 5\r\n}\r\n\r\n/**\r\n * Creates `Request` instances from provided values.\r\n *\r\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#request-class),\r\n * but is considered a static value whose body can be accessed many times. There are other\r\n * differences in the implementation, but this is the most significant.\r\n *\r\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\r\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\r\n * One such example is when creating services that wrap higher-level services, like {@link Http},\r\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\r\n *\r\n * ```typescript\r\n * import {Injectable, Injector} from '@angular/core';\r\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\r\n *\r\n * @Injectable()\r\n * class AutoAuthenticator {\r\n *   constructor(public http:Http) {}\r\n *   request(url:string) {\r\n *     return this.http.request(new Request({\r\n *       method: RequestMethod.Get,\r\n *       url: url,\r\n *       search: 'password=123'\r\n *     }));\r\n *   }\r\n * }\r\n *\r\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\r\n * var authenticator = injector.get(AutoAuthenticator);\r\n * authenticator.request('people.json').subscribe(res => {\r\n *   //URL should have included '?password=123'\r\n *   console.log('people', res.json());\r\n * });\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class Request extends ɵangular_packages_http_http_f {\r\n    /**\r\n     * Http method with which to perform the request.\r\n     */\r\n    method: RequestMethod;\r\n    /**\r\n     * {@link Headers} instance\r\n     */\r\n    headers: Headers;\r\n    /** Url of the remote resource */\r\n    url: string;\r\n    /** Type of the request body **/\r\n    private contentType;\r\n    /** Enable use credentials */\r\n    withCredentials: boolean;\r\n    /** Buffer to store the response */\r\n    responseType: ResponseContentType;\r\n    constructor(requestOptions: ɵangular_packages_http_http_d);\r\n    /**\r\n     * Returns the content type enum based on header options.\r\n     */\r\n    detectContentType(): ContentType;\r\n    /**\r\n     * Returns the content type of request's body based on its type.\r\n     */\r\n    detectContentTypeFromBody(): ContentType;\r\n    /**\r\n     * Returns the request's body according to its type. If body is undefined, return\r\n     * null.\r\n     */\r\n    getBody(): any;\r\n}\r\n\r\n\r\n/**\r\n * Supported http methods.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare enum RequestMethod {\r\n    Get = 0,\r\n    Post = 1,\r\n    Put = 2,\r\n    Delete = 3,\r\n    Options = 4,\r\n    Head = 5,\r\n    Patch = 6\r\n}\r\n\r\n/**\r\n * Creates a request options object to be optionally provided when instantiating a\r\n * {@link Request}.\r\n *\r\n * This class is based on the `RequestInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\r\n * class, which sub-classes `RequestOptions`.\r\n *\r\n * ```typescript\r\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new RequestOptions({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * });\r\n * const req = new Request(options);\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class RequestOptions {\r\n    /**\r\n     * Http method with which to execute a {@link Request}.\r\n     * Acceptable methods are defined in the {@link RequestMethod} enum.\r\n     */\r\n    method: RequestMethod | string | null;\r\n    /**\r\n     * {@link Headers} to be attached to a {@link Request}.\r\n     */\r\n    headers: Headers | null;\r\n    /**\r\n     * Body to be used when creating a {@link Request}.\r\n     */\r\n    body: any;\r\n    /**\r\n     * Url with which to perform a {@link Request}.\r\n     */\r\n    url: string | null;\r\n    /**\r\n     * Search parameters to be included in a {@link Request}.\r\n     */\r\n    params: URLSearchParams;\r\n    /**\r\n     * @deprecated from 4.0.0. Use params instead.\r\n     */\r\n    /**\r\n    * @deprecated from 4.0.0. Use params instead.\r\n    */\r\n    search: URLSearchParams;\r\n    /**\r\n     * Enable use credentials for a {@link Request}.\r\n     */\r\n    withCredentials: boolean | null;\r\n    responseType: ResponseContentType | null;\r\n    constructor(opts?: RequestOptionsArgs);\r\n    /**\r\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * Note that `headers` and `search` will override existing values completely if present in\r\n     * the `options` object. If these values should be merged, it should be done prior to calling\r\n     * `merge` on the `RequestOptions` instance.\r\n     *\r\n     * ```typescript\r\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n     *\r\n     * const options = new RequestOptions({\r\n     *   method: RequestMethod.Post\r\n     * });\r\n     * const req = new Request(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('req.method:', RequestMethod[req.method]); // Post\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('req.url:', req.url); // https://google.com\r\n     * ```\r\n     */\r\n    merge(options?: RequestOptionsArgs): RequestOptions;\r\n    private _mergeSearchParams;\r\n    private _parseParams;\r\n    private _appendParam;\r\n}\r\n\r\n/**\r\n * Interface for options to construct a RequestOptions, based on\r\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare interface RequestOptionsArgs {\r\n    url?: string | null;\r\n    method?: string | RequestMethod | null;\r\n    /** @deprecated from 4.0.0. Use params instead. */\r\n    search?: string | URLSearchParams | {\r\n        [key: string]: any | any[];\r\n    } | null;\r\n    params?: string | URLSearchParams | {\r\n        [key: string]: any | any[];\r\n    } | null;\r\n    headers?: Headers | null;\r\n    body?: any;\r\n    withCredentials?: boolean | null;\r\n    responseType?: ResponseContentType | null;\r\n}\r\n\r\n/**\r\n * Creates `Response` instances from provided values.\r\n *\r\n * Though this object isn't\r\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\r\n * add data to a view.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\r\n * ```\r\n *\r\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\r\n * can be accessed many times. There are other differences in the implementation, but this is the\r\n * most significant.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class Response extends ɵangular_packages_http_http_f {\r\n    /**\r\n     * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\r\n     *\r\n     * Defaults to \"default\".\r\n     */\r\n    type: ResponseType;\r\n    /**\r\n     * True if the response's status is within 200-299\r\n     */\r\n    ok: boolean;\r\n    /**\r\n     * URL of response.\r\n     *\r\n     * Defaults to empty string.\r\n     */\r\n    url: string;\r\n    /**\r\n     * Status code returned by server.\r\n     *\r\n     * Defaults to 200.\r\n     */\r\n    status: number;\r\n    /**\r\n     * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\r\n     * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\r\n     *\r\n     * Defaults to \"OK\"\r\n     */\r\n    statusText: string | null;\r\n    /**\r\n     * Non-standard property\r\n     *\r\n     * Denotes how many of the response body's bytes have been loaded, for example if the response is\r\n     * the result of a progress event.\r\n     */\r\n    bytesLoaded: number;\r\n    /**\r\n     * Non-standard property\r\n     *\r\n     * Denotes how many bytes are expected in the final response body.\r\n     */\r\n    totalBytes: number;\r\n    /**\r\n     * Headers object based on the `Headers` class in the [Fetch\r\n     * Spec](https://fetch.spec.whatwg.org/#headers-class).\r\n     */\r\n    headers: Headers | null;\r\n    constructor(responseOptions: ResponseOptions);\r\n    toString(): string;\r\n}\r\n\r\n/**\r\n * Define which buffer to use to store the response\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare enum ResponseContentType {\r\n    Text = 0,\r\n    Json = 1,\r\n    ArrayBuffer = 2,\r\n    Blob = 3\r\n}\r\n\r\n/**\r\n * Creates a response options object to be optionally provided when instantiating a\r\n * {@link Response}.\r\n *\r\n * This class is based on the `ResponseInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the\r\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\r\n *\r\n * This class may be used in tests to build {@link Response Responses} for\r\n * mock responses (see {@link MockBackend}).\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {ResponseOptions, Response} from '@angular/http';\r\n *\r\n * var options = new ResponseOptions({\r\n *   body: '{\"name\":\"Jeff\"}'\r\n * });\r\n * var res = new Response(options);\r\n *\r\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class ResponseOptions {\r\n    /**\r\n     * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\r\n     */\r\n    body: string | Object | ArrayBuffer | Blob | null;\r\n    /**\r\n     * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\r\n     * associated with the response.\r\n     */\r\n    status: number | null;\r\n    /**\r\n     * Response {@link Headers headers}\r\n     */\r\n    headers: Headers | null;\r\n    url: string | null;\r\n    constructor(opts?: ResponseOptionsArgs);\r\n    /**\r\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\r\n     * override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\r\n     * where certain properties may change from test to test.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * ```typescript\r\n     * import {ResponseOptions, Response} from '@angular/http';\r\n     *\r\n     * var options = new ResponseOptions({\r\n     *   body: {name: 'Jeff'}\r\n     * });\r\n     * var res = new Response(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n     * console.log('res.url:', res.url); // https://google.com\r\n     * ```\r\n     */\r\n    merge(options?: ResponseOptionsArgs): ResponseOptions;\r\n}\r\n\r\n/**\r\n * Interface for options to construct a Response, based on\r\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare interface ResponseOptionsArgs {\r\n    body?: string | Object | FormData | ArrayBuffer | Blob | null;\r\n    status?: number | null;\r\n    statusText?: string | null;\r\n    headers?: Headers | null;\r\n    type?: ResponseType | null;\r\n    url?: string | null;\r\n}\r\n\r\n/**\r\n * Acceptable response types to be associated with a {@link Response}, based on\r\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare enum ResponseType {\r\n    Basic = 0,\r\n    Cors = 1,\r\n    Default = 2,\r\n    Error = 3,\r\n    Opaque = 4\r\n}\r\n\r\n/**\r\n * Map-like representation of url search parameters, based on\r\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\r\n * with several extensions for merging URLSearchParams objects:\r\n *   - setAll()\r\n *   - appendAll()\r\n *   - replaceAll()\r\n *\r\n * This class accepts an optional second parameter of ${@link QueryEncoder},\r\n * which is used to serialize parameters before making a request. By default,\r\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\r\n * and then un-encodes certain characters that are allowed to be part of the query\r\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\r\n *\r\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\r\n *\r\n * If the set of allowed query characters is not acceptable for a particular backend,\r\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\r\n *\r\n * ```\r\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\r\n * class MyQueryEncoder extends QueryEncoder {\r\n *   encodeKey(k: string): string {\r\n *     return myEncodingFunction(k);\r\n *   }\r\n *\r\n *   encodeValue(v: string): string {\r\n *     return myEncodingFunction(v);\r\n *   }\r\n * }\r\n *\r\n * let params = new URLSearchParams('', new MyQueryEncoder());\r\n * ```\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class URLSearchParams {\r\n    rawParams: string;\r\n    private queryEncoder;\r\n    paramsMap: Map<string, string[]>;\r\n    constructor(rawParams?: string, queryEncoder?: QueryEncoder);\r\n    clone(): URLSearchParams;\r\n    has(param: string): boolean;\r\n    get(param: string): string | null;\r\n    getAll(param: string): string[];\r\n    set(param: string, val: string): void;\r\n    setAll(searchParams: URLSearchParams): void;\r\n    append(param: string, val: string): void;\r\n    appendAll(searchParams: URLSearchParams): void;\r\n    replaceAll(searchParams: URLSearchParams): void;\r\n    toString(): string;\r\n    delete(param: string): void;\r\n}\r\n\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare const VERSION: Version;\r\n\r\n/**\r\n * Creates {@link XHRConnection} instances.\r\n *\r\n * This class would typically not be used by end users, but could be\r\n * overridden if a different backend implementation should be used,\r\n * such as in a node backend.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\r\n * @Component({\r\n *   viewProviders: [\r\n *     HTTP_PROVIDERS,\r\n *     {provide: Http, useFactory: (backend, options) => {\r\n *       return new Http(backend, options);\r\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\r\n * })\r\n * class MyComponent {\r\n *   constructor(http:Http) {\r\n *     http.request('people.json').subscribe(res => this.people = res.json());\r\n *   }\r\n * }\r\n * ```\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class XHRBackend implements ConnectionBackend {\r\n    private _browserXHR;\r\n    private _baseResponseOptions;\r\n    private _xsrfStrategy;\r\n    constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions, _xsrfStrategy: XSRFStrategy);\r\n    createConnection(request: Request): XHRConnection;\r\n}\r\n\r\n/**\r\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\r\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\r\n * request.\r\n *\r\n * This class would typically not be created or interacted with directly inside applications, though\r\n * the {@link MockConnection} may be interacted with in tests.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class XHRConnection implements Connection {\r\n    request: Request;\r\n    /**\r\n     * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\r\n     * `XMLHttpRequest`.\r\n     */\r\n    response: Observable<Response>;\r\n    readyState: ReadyState;\r\n    constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions);\r\n    setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */): void;\r\n}\r\n\r\n/**\r\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare abstract class XSRFStrategy {\r\n    abstract configureRequest(req: Request): void;\r\n}\r\n\r\nexport declare function ɵangular_packages_http_http_a(): CookieXSRFStrategy;\r\n\r\nexport declare function ɵangular_packages_http_http_b(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http;\r\n\r\nexport declare function ɵangular_packages_http_http_c(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp;\r\n\r\n/**\r\n * Required structure when constructing new Request();\r\n */\r\nexport declare interface ɵangular_packages_http_http_d extends RequestOptionsArgs {\r\n    url: string | null;\r\n}\r\n\r\nexport declare class ɵangular_packages_http_http_e {\r\n    build(url: string): any;\r\n    nextRequestID(): string;\r\n    requestCallback(id: string): string;\r\n    exposeConnection(id: string, connection: any): void;\r\n    removeConnection(id: string): void;\r\n    send(node: any): void;\r\n    cleanup(node: any): void;\r\n}\r\n\r\n\r\n/**\r\n * HTTP request body used by both {@link Request} and {@link Response}\r\n * https://fetch.spec.whatwg.org/#body\r\n */\r\nexport declare abstract class ɵangular_packages_http_http_f {\r\n    /**\r\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\r\n     */\r\n    json(): any;\r\n    /**\r\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\r\n     *\r\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\r\n     * bytes in the buffer will be interpreted. Valid values are:\r\n     *\r\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\r\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\r\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\r\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\r\n     *   considered deprecated.\r\n     *\r\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\r\n     */\r\n    text(encodingHint?: 'legacy' | 'iso-8859'): string;\r\n    /**\r\n     * Return the body as an ArrayBuffer\r\n     */\r\n    arrayBuffer(): ArrayBuffer;\r\n    /**\r\n      * Returns the request's body as a Blob, assuming that body exists.\r\n      */\r\n    blob(): Blob;\r\n}\r\n\r\nexport { }\r\n"]}