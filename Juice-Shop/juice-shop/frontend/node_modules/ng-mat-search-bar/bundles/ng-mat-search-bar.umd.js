(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@angular/material/icon'),require('@angular/material/core'),require('@angular/material/form-field'),require('@angular/material/input'),require('@angular/forms'),require('@angular/material/autocomplete'),exports, require('@angular/material/autocomplete'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('ng-mat-search-bar', ['@angular/core','@angular/common','@angular/material/icon','@angular/material/core','@angular/material/form-field','@angular/material/input','@angular/forms','@angular/material/autocomplete','exports', '@angular/material/autocomplete', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/core', '@angular/material/icon', '@angular/material/input', '@angular/animations'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,global.ng.material.icon,global.ng.material.core,global.ng.material.formField,global.ng.material.input,global.ng.forms,global.ng.material.autocomplete,global['ng-mat-search-bar'] = {}, global.ng.material.autocomplete, global.ng.common, global.ng.core, global.ng.forms, global.ng.material.core, global.ng.material.icon, global.ng.material.input, global.ng.animations));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,exports, autocomplete, common, core, forms, core$1, icon, input, animations) { 
var _c0 = ["input"];
function MatSearchBarComponent_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 7, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function MatSearchBarComponent_mat_form_field_1_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.value = $event; })("ngModelChange", function MatSearchBarComponent_mat_form_field_1_Template_input_ngModelChange_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateChanges(); })("blur", function MatSearchBarComponent_mat_form_field_1_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var _r4 = ɵngcc0.ɵɵreference(2); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onBlurring(_r4.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_1_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var _r4 = ɵngcc0.ɵɵreference(2); var ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onEnterring(_r4.value); })("focus", function MatSearchBarComponent_mat_form_field_1_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var _r4 = ɵngcc0.ɵɵreference(2); var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onFocussing(_r4.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r0.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.value)("matAutocomplete", ctx_r0.matAutocomplete)("placeholder", ctx_r0.placeholder);
} }
function MatSearchBarComponent_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 9, 8);
    ɵngcc0.ɵɵlistener("blur", function MatSearchBarComponent_mat_form_field_2_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); var _r11 = ɵngcc0.ɵɵreference(2); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onBlurring(_r11.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_2_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); var _r11 = ɵngcc0.ɵɵreference(2); var ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onEnterring(_r11.value); })("focus", function MatSearchBarComponent_mat_form_field_2_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); var _r11 = ɵngcc0.ɵɵreference(2); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onFocussing(_r11.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r1.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r1.placeholder)("formControl", ctx_r1.formControl);
} }
function MatSearchBarComponent_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 10, 8);
    ɵngcc0.ɵɵlistener("blur", function MatSearchBarComponent_mat_form_field_3_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); var _r16 = ɵngcc0.ɵɵreference(2); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onBlurring(_r16.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_3_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); var _r16 = ɵngcc0.ɵɵreference(2); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.onEnterring(_r16.value); })("focus", function MatSearchBarComponent_mat_form_field_3_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); var _r16 = ɵngcc0.ɵɵreference(2); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onFocussing(_r16.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r2.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matAutocomplete", ctx_r2.matAutocomplete)("placeholder", ctx_r2.placeholder)("formControl", ctx_r2.formControl);
} }
function MatSearchBarComponent_mat_form_field_4_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 11, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function MatSearchBarComponent_mat_form_field_4_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.value = $event; })("ngModelChange", function MatSearchBarComponent_mat_form_field_4_Template_input_ngModelChange_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.updateChanges(); })("blur", function MatSearchBarComponent_mat_form_field_4_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var _r21 = ɵngcc0.ɵɵreference(2); var ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onBlurring(_r21.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_4_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var _r21 = ɵngcc0.ɵɵreference(2); var ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.onEnterring(_r21.value); })("focus", function MatSearchBarComponent_mat_form_field_4_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); var _r21 = ɵngcc0.ɵɵreference(2); var ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.onFocussing(_r21.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r3.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.value)("placeholder", ctx_r3.placeholder);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var AbstractControlValueAccessor = /** @class */ (function () {
        function AbstractControlValueAccessor() {
            /**
             * Invoked when the model has been changed
             */
            this.onChange = function (_) { };
            /**
             * Invoked when the model has been touched
             */
            this.onTouched = function () { };
        }
        /**
         * Method that is invoked on an update of a model.
         */
        AbstractControlValueAccessor.prototype.updateChanges = function () {
            this.onChange(this.value);
        };
        /**
         * Writes a new item to the element.
         * @param value the value
         */
        AbstractControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            this.updateChanges();
        };
        /**
         * Registers a callback function that should be called when the control's value changes in the UI.
         * @param fn
         */
        AbstractControlValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Registers a callback function that should be called when the control receives a blur event.
         * @param fn
         */
        AbstractControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
AbstractControlValueAccessor.ɵfac = function AbstractControlValueAccessor_Factory(t) { return new (t || AbstractControlValueAccessor)(); };
AbstractControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractControlValueAccessor });

        return AbstractControlValueAccessor;
    }());

    var DISPLAY_TYPE;
    (function (DISPLAY_TYPE) {
        DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
        DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
        DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
        DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
    })(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
    var MatSearchBarComponent = /** @class */ (function (_super) {
        __extends(MatSearchBarComponent, _super);
        function MatSearchBarComponent() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.DISPLAY_TYPE = DISPLAY_TYPE;
            _this.placeholder = '';
            _this.onBlur = new core.EventEmitter();
            _this.onClose = new core.EventEmitter();
            _this.onEnter = new core.EventEmitter();
            _this.onFocus = new core.EventEmitter();
            _this.onOpen = new core.EventEmitter();
            _this.searchVisible = false;
            return _this;
        }
        MatSearchBarComponent.prototype.ngOnInit = function () {
            if (!this.formControl && !this.matAutocomplete)
                this.mode = DISPLAY_TYPE.SIMPLE;
            else if (this.formControl && this.matAutocomplete)
                this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
            else if (this.formControl)
                this.mode = DISPLAY_TYPE.FORMCONTROL;
            else if (this.matAutocomplete)
                this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
        };
        MatSearchBarComponent.prototype.close = function () {
            this.searchVisible = false;
            this.value = '';
            this.updateChanges();
            this.onClose.emit();
        };
        MatSearchBarComponent.prototype.open = function () {
            this.searchVisible = true;
            this.inputElement.nativeElement.focus();
            this.onOpen.emit();
        };
        MatSearchBarComponent.prototype.onBlurring = function (searchValue) {
            if (!searchValue) {
                this.searchVisible = false;
            }
            this.onBlur.emit(searchValue);
        };
        MatSearchBarComponent.prototype.onEnterring = function (searchValue) {
            this.onEnter.emit(searchValue);
        };
        MatSearchBarComponent.prototype.onFocussing = function (searchValue) {
            this.onFocus.emit(searchValue);
        };
MatSearchBarComponent.ɵfac = function MatSearchBarComponent_Factory(t) { return ɵMatSearchBarComponent_BaseFactory(t || MatSearchBarComponent); };
MatSearchBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSearchBarComponent, selectors: [["mat-search-bar"]], viewQuery: function MatSearchBarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, inputs: { formControl: "formControl", matAutocomplete: "matAutocomplete", placeholder: "placeholder" }, outputs: { onBlur: "onBlur", onClose: "onClose", onEnter: "onEnter", onFocus: "onFocus", onOpen: "onOpen" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return MatSearchBarComponent; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 6, consts: [[3, "ngSwitch"], ["class", "mat-search_field", 4, "ngSwitchCase"], ["class", "mat-search_field", 4, "ngSwitchDefault"], [1, "mat-search_icons"], ["matRipple", "", 1, "mat-search_icon-close", 3, "click"], ["matRipple", "", 1, "mat-search_icon-search", 3, "click"], [1, "mat-search_field"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "ngModel", "matAutocomplete", "placeholder", "ngModelChange", "blur", "keyup.enter", "focus"], ["input", ""], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "placeholder", "formControl", "blur", "keyup.enter", "focus"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "matAutocomplete", "placeholder", "formControl", "blur", "keyup.enter", "focus"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "ngModel", "placeholder", "ngModelChange", "blur", "keyup.enter", "focus"]], template: function MatSearchBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, MatSearchBarComponent_mat_form_field_1_Template, 3, 4, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(2, MatSearchBarComponent_mat_form_field_2_Template, 3, 3, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(3, MatSearchBarComponent_mat_form_field_3_Template, 3, 4, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(4, MatSearchBarComponent_mat_form_field_4_Template, 3, 3, "mat-form-field", 2);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵelementStart(6, "mat-icon", 4);
        ɵngcc0.ɵɵlistener("click", function MatSearchBarComponent_Template_mat_icon_click_6_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(7, " close ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-icon", 5);
        ɵngcc0.ɵɵlistener("click", function MatSearchBarComponent_Template_mat_icon_click_8_listener() { return ctx.open(); });
        ɵngcc0.ɵɵtext(9, " search ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.mode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.AUTOCOMPLETE);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.FORMCONTROL);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("mat-search_icons--active", ctx.searchVisible);
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ɵngcc2.MatIcon, ɵngcc3.MatRipple, ɵngcc4.MatFormField, ɵngcc5.MatInput, ɵngcc6.DefaultValueAccessor, ɵngcc7.MatAutocompleteTrigger, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc6.FormControlDirective], styles: ["[_nghost-%COMP%]{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field[_ngcontent-%COMP%]{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons[_ngcontent-%COMP%]{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons[_ngcontent-%COMP%]:hover{cursor:pointer}.mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%], .mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-search[_ngcontent-%COMP%]{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%], .mat-search_icons.mat-search_icons--active[_ngcontent-%COMP%]   .mat-search_icon-search[_ngcontent-%COMP%]{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%]{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"], data: { animation: [
            animations.trigger('slideInOut', [
                animations.state('true', animations.style({ width: '*' })),
                animations.state('false', animations.style({ width: '0' })),
                animations.transition('true => false', animations.animate('300ms ease-in')),
                animations.transition('false => true', animations.animate('300ms ease-out'))
            ])
        ] } });
var ɵMatSearchBarComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSearchBarComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSearchBarComponent, [{
        type: core.Component,
        args: [{
                selector: 'mat-search-bar',
                template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
                animations: [
                    animations.trigger('slideInOut', [
                        animations.state('true', animations.style({ width: '*' })),
                        animations.state('false', animations.style({ width: '0' })),
                        animations.transition('true => false', animations.animate('300ms ease-in')),
                        animations.transition('false => true', animations.animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return MatSearchBarComponent; }),
                        multi: true
                    }
                ],
                styles: [":host{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"]
            }]
    }], null, { inputElement: [{
            type: core.ViewChild,
            args: ['input']
        }], formControl: [{
            type: core.Input
        }], matAutocomplete: [{
            type: core.Input
        }], placeholder: [{
            type: core.Input
        }], onBlur: [{
            type: core.Output
        }], onClose: [{
            type: core.Output
        }], onEnter: [{
            type: core.Output
        }], onFocus: [{
            type: core.Output
        }], onOpen: [{
            type: core.Output
        }] }); })();
        return MatSearchBarComponent;
    }(AbstractControlValueAccessor));
    MatSearchBarComponent.propDecorators = {
        inputElement: [{ type: core.ViewChild, args: ['input',] }],
        formControl: [{ type: core.Input }],
        matAutocomplete: [{ type: core.Input }],
        placeholder: [{ type: core.Input }],
        onBlur: [{ type: core.Output }],
        onClose: [{ type: core.Output }],
        onEnter: [{ type: core.Output }],
        onFocus: [{ type: core.Output }],
        onOpen: [{ type: core.Output }]
    };

    var NgMatSearchBarModule = /** @class */ (function () {
        function NgMatSearchBarModule() {
        }
NgMatSearchBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMatSearchBarModule });
NgMatSearchBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMatSearchBarModule_Factory(t) { return new (t || NgMatSearchBarModule)(); }, imports: [[
            common.CommonModule,
            forms.FormsModule,
            autocomplete.MatAutocompleteModule,
            icon.MatIconModule,
            input.MatInputModule,
            core$1.MatRippleModule,
            //Reactive form
            forms.ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMatSearchBarModule, { declarations: [MatSearchBarComponent], imports: [ɵngcc1.CommonModule, ɵngcc6.FormsModule, ɵngcc7.MatAutocompleteModule, ɵngcc2.MatIconModule, ɵngcc5.MatInputModule, ɵngcc3.MatRippleModule, ɵngcc6.ReactiveFormsModule], exports: [MatSearchBarComponent] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgMatSearchBarModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    autocomplete.MatAutocompleteModule,
                    icon.MatIconModule,
                    input.MatInputModule,
                    core$1.MatRippleModule,
                    //Reactive form
                    forms.ReactiveFormsModule
                ],
                exports: [MatSearchBarComponent],
                declarations: [MatSearchBarComponent]
            }]
    }], function () { return []; }, null); })();
        return NgMatSearchBarModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgMatSearchBarModule = NgMatSearchBarModule;
    exports.ɵa = MatSearchBarComponent;
    exports.ɵb = AbstractControlValueAccessor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-mat-search-bar.umd.js.map