{"version":3,"file":"ngx-clipboard.js","sources":["../../../projects/ngx-clipboard/src/lib/ngx-clipboard.service.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard-if-supported.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.module.ts","../../../projects/ngx-clipboard/src/public_api.ts","../../../projects/ngx-clipboard/src/ngx-clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { ClipboardParams, IClipboardResponse } from './interface';\r\n\r\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    private config: ClipboardParams = {};\r\n\r\n    constructor(@Inject(DOCUMENT) public document: any, @Optional() @Inject(WINDOW) private window: any) {}\r\n\r\n    public configure(config: ClipboardParams) {\r\n        this.config = config;\r\n    }\r\n\r\n    public copy(content: string): void {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    public isCopySuccessInIE11(): boolean {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    public destroy(container: HTMLElement = this.document.body): void {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection()?.removeAllRanges();\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyResponse(response: IClipboardResponse): void {\r\n        this.copySubject.next(response);\r\n    }\r\n\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse): void {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\r\n    @Input()\r\n    public container: HTMLElement;\r\n\r\n    @Input()\r\n    public cbContent: string | undefined;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(\r\n        private _clipboardService: ClipboardService,\r\n        private _viewContainerRef: ViewContainerRef,\r\n        private _templateRef: TemplateRef<any>\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n","/*\r\n * Public API Surface of ngx-clipboard\r\n */\r\n\r\nexport * from './lib/ngx-clipboard.service';\r\nexport * from './lib/ngx-clipboard.directive';\r\nexport * from './lib/ngx-clipboard.module';\r\nexport * from './lib/ngx-clipboard-if-supported.directive';\r\nexport * from './lib/interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}