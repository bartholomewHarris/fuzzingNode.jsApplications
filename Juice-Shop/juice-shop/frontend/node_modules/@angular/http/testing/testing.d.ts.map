{"version":3,"file":"testing.d.ts","sources":["testing.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v8.0.0-beta.10+1.sha-a28b3e3\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Connection } from '@angular/http';\r\nimport { ConnectionBackend } from '@angular/http';\r\nimport { ReadyState } from '@angular/http';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { Request } from '@angular/http';\r\nimport { Response } from '@angular/http';\r\n\r\n/**\r\n * A mock backend for testing the {@link Http} service.\r\n *\r\n * This class can be injected in tests, and should be used to override providers\r\n * to other backends, such as {@link XHRBackend}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Injectable, Injector} from '@angular/core';\r\n * import {async, fakeAsync, tick} from '@angular/core/testing';\r\n * import {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '@angular/http';\r\n * import {Response, ResponseOptions} from '@angular/http';\r\n * import {MockBackend, MockConnection} from '@angular/http/testing';\r\n *\r\n * const HERO_ONE = 'HeroNrOne';\r\n * const HERO_TWO = 'WillBeAlwaysTheSecond';\r\n *\r\n * @Injectable()\r\n * class HeroService {\r\n *   constructor(private http: Http) {}\r\n *\r\n *   getHeroes(): Promise<String[]> {\r\n *     return this.http.get('myservices.de/api/heroes')\r\n *         .toPromise()\r\n *         .then(response => response.json().data)\r\n *         .catch(e => this.handleError(e));\r\n *   }\r\n *\r\n *   private handleError(error: any): Promise<any> {\r\n *     console.error('An error occurred', error);\r\n *     return Promise.reject(error.message || error);\r\n *   }\r\n * }\r\n *\r\n * describe('MockBackend HeroService Example', () => {\r\n *   beforeEach(() => {\r\n *     this.injector = Injector.create([\r\n *       {provide: ConnectionBackend, useClass: MockBackend},\r\n *       {provide: RequestOptions, useClass: BaseRequestOptions},\r\n *       Http,\r\n *       HeroService,\r\n *     ]);\r\n *     this.heroService = this.injector.get(HeroService);\r\n *     this.backend = this.injector.get(ConnectionBackend) as MockBackend;\r\n *     this.backend.connections.subscribe((connection: any) => this.lastConnection = connection);\r\n *   });\r\n *\r\n *   it('getHeroes() should query current service url', () => {\r\n *     this.heroService.getHeroes();\r\n *     expect(this.lastConnection).toBeDefined('no http service connection at all?');\r\n *     expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\r\n *   });\r\n *\r\n *   it('getHeroes() should return some heroes', fakeAsync(() => {\r\n *        let result: String[];\r\n *        this.heroService.getHeroes().then((heroes: String[]) => result = heroes);\r\n *        this.lastConnection.mockRespond(new Response(new ResponseOptions({\r\n *          body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\r\n *        })));\r\n *        tick();\r\n *        expect(result.length).toEqual(2, 'should contain given amount of heroes');\r\n *        expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\r\n *        expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\r\n *      }));\r\n *\r\n *   it('getHeroes() while server is down', fakeAsync(() => {\r\n *        let result: String[];\r\n *        let catchedError: any;\r\n *        this.heroService.getHeroes()\r\n *            .then((heroes: String[]) => result = heroes)\r\n *            .catch((error: any) => catchedError = error);\r\n *        this.lastConnection.mockError(new Response(new ResponseOptions({\r\n *          status: 404,\r\n *          statusText: 'URL not Found',\r\n *        })));\r\n *        tick();\r\n *        expect(result).toBeUndefined();\r\n *        expect(catchedError).toBeDefined();\r\n *      }));\r\n * });\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class MockBackend implements ConnectionBackend {\r\n    /**\r\n     * {@link EventEmitter}\r\n     * of {@link MockConnection} instances that have been created by this backend. Can be subscribed\r\n     * to in order to respond to connections.\r\n     *\r\n     * This property only exists in the mock implementation, not in real Backends.\r\n     */\r\n    connections: any;\r\n    /**\r\n     * An array representation of `connections`. This array will be updated with each connection that\r\n     * is created by this backend.\r\n     *\r\n     * This property only exists in the mock implementation, not in real Backends.\r\n     */\r\n    connectionsArray: MockConnection[];\r\n    /**\r\n     * {@link EventEmitter} of {@link MockConnection} instances that haven't yet been resolved (i.e.\r\n     * with a `readyState`\r\n     * less than 4). Used internally to verify that no connections are pending via the\r\n     * `verifyNoPendingRequests` method.\r\n     *\r\n     * This property only exists in the mock implementation, not in real Backends.\r\n     */\r\n    pendingConnections: any;\r\n    constructor();\r\n    /**\r\n     * Checks all connections, and raises an exception if any connection has not received a response.\r\n     *\r\n     * This method only exists in the mock implementation, not in real Backends.\r\n     */\r\n    verifyNoPendingRequests(): void;\r\n    /**\r\n     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\r\n     * connections, if it's expected that there are connections that have not yet received a response.\r\n     *\r\n     * This method only exists in the mock implementation, not in real Backends.\r\n     */\r\n    resolveAllConnections(): void;\r\n    /**\r\n     * Creates a new {@link MockConnection}. This is equivalent to calling `new\r\n     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\r\n     * emitter of this `MockBackend` instance. This method will usually only be used by tests\r\n     * against the framework itself, not by end-users.\r\n     */\r\n    createConnection(req: Request): MockConnection;\r\n}\r\n\r\n/**\r\n *\r\n * Mock Connection to represent a {@link Connection} for tests.\r\n *\r\n * @usageNotes\r\n * ### Example of `mockRespond()`\r\n *\r\n * ```\r\n * var connection;\r\n * backend.connections.subscribe(c => connection = c);\r\n * http.request('data.json').subscribe(res => console.log(res.text()));\r\n * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\r\n * 'fake response'\r\n * ```\r\n *\r\n * ### Example of `mockError()`\r\n *\r\n * ```\r\n * var connection;\r\n * backend.connections.subscribe(c => connection = c);\r\n * http.request('data.json').subscribe(res => res, err => console.log(err)));\r\n * connection.mockError(new Error('error'));\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nexport declare class MockConnection implements Connection {\r\n    /**\r\n     * Describes the state of the connection, based on `XMLHttpRequest.readyState`, but with\r\n     * additional states. For example, state 5 indicates an aborted connection.\r\n     */\r\n    readyState: ReadyState;\r\n    /**\r\n     * {@link Request} instance used to create the connection.\r\n     */\r\n    request: Request;\r\n    /**\r\n     * {@link EventEmitter} of {@link Response}. Can be subscribed to in order to be notified when a\r\n     * response is available.\r\n     */\r\n    response: ReplaySubject<Response>;\r\n    constructor(req: Request);\r\n    /**\r\n     * Sends a mock response to the connection. This response is the value that is emitted to the\r\n     * {@link EventEmitter} returned by {@link Http}.\r\n     *\r\n     */\r\n    mockRespond(res: Response): void;\r\n    /**\r\n     * Not yet implemented!\r\n     *\r\n     * Sends the provided {@link Response} to the `downloadObserver` of the `Request`\r\n     * associated with this connection.\r\n     */\r\n    mockDownload(res: Response): void;\r\n    /**\r\n     * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}\r\n     * returned\r\n     * from {@link Http}.\r\n     *\r\n     */\r\n    mockError(err?: Error): void;\r\n}\r\n\r\nexport { }\r\n"]}