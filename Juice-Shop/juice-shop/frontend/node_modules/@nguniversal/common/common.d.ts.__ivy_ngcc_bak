
import { ApplicationRef } from '@angular/core';
import { HttpEvent } from '@angular/common/http';
import { HttpHandler } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TransferState } from '@angular/platform-browser';

export declare class StateTransferInitializerModule {
}

/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export declare class TransferHttpCacheModule {
}


export declare function ɵnguniversal_modules_common_common_a(doc: Document): () => Promise<unknown>;

export declare class ɵTransferHttpCacheInterceptor implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private invalidateCacheEntry;
    private makeCacheKey;
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
}

export { }
