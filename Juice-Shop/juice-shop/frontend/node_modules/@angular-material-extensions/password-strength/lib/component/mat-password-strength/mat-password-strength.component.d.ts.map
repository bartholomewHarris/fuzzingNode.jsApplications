{"version":3,"file":"mat-password-strength.component.d.ts","sources":["mat-password-strength.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl, ValidatorFn } from '@angular/forms';\nimport { Criteria } from '../../enum/criteria.enum';\nimport { MatPasswordStrengthValidator } from '../../validator/mat-password-strength-validator';\nimport { ThemePalette } from '@angular/material/core';\nexport declare class MatPasswordStrengthComponent implements OnInit, OnChanges {\n    password: string;\n    externalError: boolean;\n    enableLengthRule: boolean;\n    enableLowerCaseLetterRule: boolean;\n    enableUpperCaseLetterRule: boolean;\n    enableDigitRule: boolean;\n    enableSpecialCharRule: boolean;\n    min: number;\n    max: number;\n    customValidator: RegExp;\n    warnThreshold: number;\n    accentThreshold: number;\n    onStrengthChanged: EventEmitter<number>;\n    criteriaMap: Map<Criteria, RegExp>;\n    containAtLeastMinChars: boolean;\n    containAtLeastOneLowerCaseLetter: boolean;\n    containAtLeastOneUpperCaseLetter: boolean;\n    containAtLeastOneDigit: boolean;\n    containAtLeastOneSpecialChar: boolean;\n    containAtCustomChars: boolean;\n    passwordFormControl: FormControl;\n    passwordConfirmationFormControl: FormControl;\n    validatorsArray: ValidatorFn[];\n    private _strength;\n    private _color;\n    Validators: ValidatorFn;\n    matPasswordStrengthValidator: MatPasswordStrengthValidator;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    get strength(): number;\n    get color(): ThemePalette;\n    private _containAtLeastMinChars;\n    private _containAtLeastOneLowerCaseLetter;\n    private _containAtLeastOneUpperCaseLetter;\n    private _containAtLeastOneDigit;\n    private _containAtLeastOneSpecialChar;\n    private _containCustomChars;\n    parseCustomValidatorsRegex(value?: string | RegExp): RegExp;\n    setRulesAndValidators(): void;\n    calculatePasswordStrength(): void;\n    reset(): void;\n}\n"]}