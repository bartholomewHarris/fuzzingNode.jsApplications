import { __awaiter } from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ResourceLoader } from '@angular/compiler';
import { CompilerFactory, NgModuleFactory } from '@angular/core';
import { INITIAL_CONFIG, platformDynamicServer, renderModuleFactory } from '@angular/platform-server';
import * as fs from 'fs';
import { FileLoader } from './file-loader';
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export class CommonEngine {
    constructor(moduleOrFactory, providers = []) {
        this.moduleOrFactory = moduleOrFactory;
        this.providers = providers;
        this.factoryCacheMap = new Map();
        this.templateCache = {};
    }
    /** Return an instance of the platformServer compiler */
    getCompiler() {
        const compilerFactory = platformDynamicServer().injector.get(CompilerFactory);
        return compilerFactory.createCompiler([
            { providers: [{ provide: ResourceLoader, useClass: FileLoader, deps: [] }] }
        ]);
    }
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    render(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            // if opts.document dosen't exist then opts.documentFilePath must
            const doc = opts.document || (yield this.getDocument(opts.documentFilePath));
            const extraProviders = [
                ...(opts.providers || []),
                ...(this.providers || []),
                {
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: doc,
                        url: opts.url
                    }
                }
            ];
            const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;
            const factory = yield this.getFactory(moduleOrFactory);
            return renderModuleFactory(factory, { extraProviders });
        });
    }
    /** Return the factory for a given engine instance */
    getFactory(moduleOrFactory) {
        return __awaiter(this, void 0, void 0, function* () {
            // If module has been compiled AoT
            if (moduleOrFactory instanceof NgModuleFactory) {
                return moduleOrFactory;
            }
            else {
                // we're in JIT mode
                const moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
                // If module factory is cached
                if (moduleFactory) {
                    return moduleFactory;
                }
                // Compile the module and cache it
                const factory = yield this.getCompiler().compileModuleAsync(moduleOrFactory);
                this.factoryCacheMap.set(moduleOrFactory, factory);
                return factory;
            }
        });
    }
    /** Retrieve the document from the cache or the filesystem */
    getDocument(filePath) {
        const doc = this.templateCache[filePath] = this.templateCache[filePath] ||
            fs.readFileSync(filePath).toString();
        // As  promise so we can change the API later without breaking
        return Promise.resolve(doc);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vZW5naW5lL3NyYy9lbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQVksZUFBZSxFQUFFLGVBQWUsRUFBd0IsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RHLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXpCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0M7Ozs7R0FJRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBY3ZCLFlBQW9CLGVBQWdELEVBQ2hELFlBQThCLEVBQUU7UUFEaEMsb0JBQWUsR0FBZixlQUFlLENBQWlDO1FBQ2hELGNBQVMsR0FBVCxTQUFTLENBQXVCO1FBSjVDLG9CQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWlDLENBQUM7UUFDM0Qsa0JBQWEsR0FBNEIsRUFBRSxDQUFDO0lBR0csQ0FBQztJQWJ4RCx3REFBd0Q7SUFDeEQsV0FBVztRQUNULE1BQU0sZUFBZSxHQUFvQixxQkFBcUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFL0YsT0FBTyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3BDLEVBQUMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUM7U0FDekUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQVFEOzs7T0FHRztJQUNHLE1BQU0sQ0FBQyxJQUFtQjs7WUFDOUIsaUVBQWlFO1lBQ2pFLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUksTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBMEIsQ0FBQyxDQUFBLENBQUM7WUFDckYsTUFBTSxjQUFjLEdBQUc7Z0JBQ3JCLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztnQkFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO2dCQUN6QjtvQkFDRSxPQUFPLEVBQUUsY0FBYztvQkFDdkIsUUFBUSxFQUFFO3dCQUNSLFFBQVEsRUFBRSxHQUFHO3dCQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztxQkFDZDtpQkFDRjthQUNGLENBQUM7WUFFRixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDL0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRXZELE9BQU8sbUJBQW1CLENBQUMsT0FBTyxFQUFFLEVBQUMsY0FBYyxFQUFDLENBQUMsQ0FBQztRQUN4RCxDQUFDO0tBQUE7SUFFRCxxREFBcUQ7SUFDL0MsVUFBVSxDQUFDLGVBQStDOztZQUM5RCxrQ0FBa0M7WUFDbEMsSUFBSSxlQUFlLFlBQVksZUFBZSxFQUFFO2dCQUM5QyxPQUFPLGVBQWUsQ0FBQzthQUN4QjtpQkFBTTtnQkFDTCxvQkFBb0I7Z0JBQ3BCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUVoRSw4QkFBOEI7Z0JBQzlCLElBQUksYUFBYSxFQUFFO29CQUNqQixPQUFPLGFBQWEsQ0FBQztpQkFDdEI7Z0JBRUQsa0NBQWtDO2dCQUNsQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDN0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUVuRCxPQUFPLE9BQU8sQ0FBQzthQUNoQjtRQUNILENBQUM7S0FBQTtJQUVELDZEQUE2RDtJQUNyRCxXQUFXLENBQUMsUUFBZ0I7UUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztZQUN2RSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXJDLDhEQUE4RDtRQUM5RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBSZXNvdXJjZUxvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcbmltcG9ydCB7IENvbXBpbGVyLCBDb21waWxlckZhY3RvcnksIE5nTW9kdWxlRmFjdG9yeSwgU3RhdGljUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElOSVRJQUxfQ09ORklHLCBwbGF0Zm9ybUR5bmFtaWNTZXJ2ZXIsIHJlbmRlck1vZHVsZUZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1zZXJ2ZXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi9maWxlLWxvYWRlcic7XG5pbXBvcnQgeyBSZW5kZXJPcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBBIGNvbW1vbiByZW5kZXJpbmcgZW5naW5lIHV0aWxpdHkuIFRoaXMgYWJzdHJhY3RzIHRoZSBsb2dpY1xuICogZm9yIGhhbmRsaW5nIHRoZSBwbGF0Zm9ybVNlcnZlciBjb21waWxlciwgdGhlIG1vZHVsZSBjYWNoZSwgYW5kXG4gKiB0aGUgZG9jdW1lbnQgbG9hZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tb25FbmdpbmUge1xuXG4gIC8qKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHBsYXRmb3JtU2VydmVyIGNvbXBpbGVyICovXG4gIGdldENvbXBpbGVyKCk6IENvbXBpbGVyIHtcbiAgICBjb25zdCBjb21waWxlckZhY3Rvcnk6IENvbXBpbGVyRmFjdG9yeSA9IHBsYXRmb3JtRHluYW1pY1NlcnZlcigpLmluamVjdG9yLmdldChDb21waWxlckZhY3RvcnkpO1xuXG4gICAgcmV0dXJuIGNvbXBpbGVyRmFjdG9yeS5jcmVhdGVDb21waWxlcihbXG4gICAgICB7cHJvdmlkZXJzOiBbe3Byb3ZpZGU6IFJlc291cmNlTG9hZGVyLCB1c2VDbGFzczogRmlsZUxvYWRlciwgZGVwczogW119XX1cbiAgICBdKTtcbiAgfVxuXG4gIHByaXZhdGUgZmFjdG9yeUNhY2hlTWFwID0gbmV3IE1hcDxUeXBlPHt9PiwgTmdNb2R1bGVGYWN0b3J5PHt9Pj4oKTtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZUNhY2hlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kdWxlT3JGYWN0b3J5PzogVHlwZTx7fT4gfCBOZ01vZHVsZUZhY3Rvcnk8e30+LFxuICAgICAgICAgICAgICBwcml2YXRlIHByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtdKSB7fVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYW4gSFRNTCBkb2N1bWVudCBmb3IgYSBzcGVjaWZpYyBVUkwgd2l0aCBzcGVjaWZpZWRcbiAgICogcmVuZGVyIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHJlbmRlcihvcHRzOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBpZiBvcHRzLmRvY3VtZW50IGRvc2VuJ3QgZXhpc3QgdGhlbiBvcHRzLmRvY3VtZW50RmlsZVBhdGggbXVzdFxuICAgIGNvbnN0IGRvYyA9IG9wdHMuZG9jdW1lbnQgfHwgYXdhaXQgdGhpcy5nZXREb2N1bWVudChvcHRzLmRvY3VtZW50RmlsZVBhdGggYXMgc3RyaW5nKTtcbiAgICBjb25zdCBleHRyYVByb3ZpZGVycyA9IFtcbiAgICAgIC4uLihvcHRzLnByb3ZpZGVycyB8fCBbXSksXG4gICAgICAuLi4odGhpcy5wcm92aWRlcnMgfHwgW10pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBJTklUSUFMX0NPTkZJRyxcbiAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICBkb2N1bWVudDogZG9jLFxuICAgICAgICAgIHVybDogb3B0cy51cmxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICBjb25zdCBtb2R1bGVPckZhY3RvcnkgPSB0aGlzLm1vZHVsZU9yRmFjdG9yeSB8fCBvcHRzLmJvb3RzdHJhcDtcbiAgICBjb25zdCBmYWN0b3J5ID0gYXdhaXQgdGhpcy5nZXRGYWN0b3J5KG1vZHVsZU9yRmFjdG9yeSk7XG5cbiAgICByZXR1cm4gcmVuZGVyTW9kdWxlRmFjdG9yeShmYWN0b3J5LCB7ZXh0cmFQcm92aWRlcnN9KTtcbiAgfVxuXG4gIC8qKiBSZXR1cm4gdGhlIGZhY3RvcnkgZm9yIGEgZ2l2ZW4gZW5naW5lIGluc3RhbmNlICovXG4gIGFzeW5jIGdldEZhY3RvcnkobW9kdWxlT3JGYWN0b3J5OiBUeXBlPHt9PiB8IE5nTW9kdWxlRmFjdG9yeTx7fT4pOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTx7fT4+IHtcbiAgICAvLyBJZiBtb2R1bGUgaGFzIGJlZW4gY29tcGlsZWQgQW9UXG4gICAgaWYgKG1vZHVsZU9yRmFjdG9yeSBpbnN0YW5jZW9mIE5nTW9kdWxlRmFjdG9yeSkge1xuICAgICAgcmV0dXJuIG1vZHVsZU9yRmFjdG9yeTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UncmUgaW4gSklUIG1vZGVcbiAgICAgIGNvbnN0IG1vZHVsZUZhY3RvcnkgPSB0aGlzLmZhY3RvcnlDYWNoZU1hcC5nZXQobW9kdWxlT3JGYWN0b3J5KTtcblxuICAgICAgLy8gSWYgbW9kdWxlIGZhY3RvcnkgaXMgY2FjaGVkXG4gICAgICBpZiAobW9kdWxlRmFjdG9yeSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlRmFjdG9yeTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29tcGlsZSB0aGUgbW9kdWxlIGFuZCBjYWNoZSBpdFxuICAgICAgY29uc3QgZmFjdG9yeSA9IGF3YWl0IHRoaXMuZ2V0Q29tcGlsZXIoKS5jb21waWxlTW9kdWxlQXN5bmMobW9kdWxlT3JGYWN0b3J5KTtcbiAgICAgIHRoaXMuZmFjdG9yeUNhY2hlTWFwLnNldChtb2R1bGVPckZhY3RvcnksIGZhY3RvcnkpO1xuXG4gICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICB9XG4gIH1cblxuICAvKiogUmV0cmlldmUgdGhlIGRvY3VtZW50IGZyb20gdGhlIGNhY2hlIG9yIHRoZSBmaWxlc3lzdGVtICovXG4gIHByaXZhdGUgZ2V0RG9jdW1lbnQoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZG9jID0gdGhpcy50ZW1wbGF0ZUNhY2hlW2ZpbGVQYXRoXSA9IHRoaXMudGVtcGxhdGVDYWNoZVtmaWxlUGF0aF0gfHxcbiAgICBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCk7XG5cbiAgICAvLyBBcyAgcHJvbWlzZSBzbyB3ZSBjYW4gY2hhbmdlIHRoZSBBUEkgbGF0ZXIgd2l0aG91dCBicmVha2luZ1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZG9jKTtcbiAgfVxufVxuIl19