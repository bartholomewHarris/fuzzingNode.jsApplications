{"version":3,"file":"common.d.ts","sources":["common.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA","sourcesContent":["\nimport { ApplicationRef } from '@angular/core';\r\nimport { HttpEvent } from '@angular/common/http';\r\nimport { HttpHandler } from '@angular/common/http';\r\nimport { HttpInterceptor } from '@angular/common/http';\r\nimport { HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nexport declare class StateTransferInitializerModule {\r\n}\r\n\r\n/**\r\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\r\n * calls from the server to the client application.\r\n */\r\nexport declare class TransferHttpCacheModule {\r\n}\r\n\r\n\r\nexport declare function ɵnguniversal_modules_common_common_a(doc: Document): () => Promise<unknown>;\r\n\r\nexport declare class ɵTransferHttpCacheInterceptor implements HttpInterceptor {\r\n    private transferState;\r\n    private isCacheActive;\r\n    private invalidateCacheEntry;\r\n    private makeCacheKey;\r\n    constructor(appRef: ApplicationRef, transferState: TransferState);\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\r\n}\r\n\r\nexport { }\r\n"]}