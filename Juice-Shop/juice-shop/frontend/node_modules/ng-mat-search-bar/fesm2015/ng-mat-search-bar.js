import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { CommonModule } from '@angular/common';
import { EventEmitter, Component, forwardRef, ViewChild, Input, Output, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { trigger, state, style, transition, animate } from '@angular/animations';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/icon';
import * as ɵngcc3 from '@angular/material/core';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/material/autocomplete';

const _c0 = ["input"];
function MatSearchBarComponent_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 7, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function MatSearchBarComponent_mat_form_field_1_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.value = $event; })("ngModelChange", function MatSearchBarComponent_mat_form_field_1_Template_input_ngModelChange_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateChanges(); })("blur", function MatSearchBarComponent_mat_form_field_1_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const _r4 = ɵngcc0.ɵɵreference(2); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onBlurring(_r4.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_1_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const _r4 = ɵngcc0.ɵɵreference(2); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onEnterring(_r4.value); })("focus", function MatSearchBarComponent_mat_form_field_1_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const _r4 = ɵngcc0.ɵɵreference(2); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onFocussing(_r4.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r0.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.value)("matAutocomplete", ctx_r0.matAutocomplete)("placeholder", ctx_r0.placeholder);
} }
function MatSearchBarComponent_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 9, 8);
    ɵngcc0.ɵɵlistener("blur", function MatSearchBarComponent_mat_form_field_2_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r11 = ɵngcc0.ɵɵreference(2); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onBlurring(_r11.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_2_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r11 = ɵngcc0.ɵɵreference(2); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onEnterring(_r11.value); })("focus", function MatSearchBarComponent_mat_form_field_2_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r13); const _r11 = ɵngcc0.ɵɵreference(2); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onFocussing(_r11.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r1.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ctx_r1.placeholder)("formControl", ctx_r1.formControl);
} }
function MatSearchBarComponent_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 10, 8);
    ɵngcc0.ɵɵlistener("blur", function MatSearchBarComponent_mat_form_field_3_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const _r16 = ɵngcc0.ɵɵreference(2); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onBlurring(_r16.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_3_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const _r16 = ɵngcc0.ɵɵreference(2); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.onEnterring(_r16.value); })("focus", function MatSearchBarComponent_mat_form_field_3_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const _r16 = ɵngcc0.ɵɵreference(2); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onFocussing(_r16.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r2.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matAutocomplete", ctx_r2.matAutocomplete)("placeholder", ctx_r2.placeholder)("formControl", ctx_r2.formControl);
} }
function MatSearchBarComponent_mat_form_field_4_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 6);
    ɵngcc0.ɵɵelementStart(1, "input", 11, 8);
    ɵngcc0.ɵɵlistener("ngModelChange", function MatSearchBarComponent_mat_form_field_4_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.value = $event; })("ngModelChange", function MatSearchBarComponent_mat_form_field_4_Template_input_ngModelChange_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.updateChanges(); })("blur", function MatSearchBarComponent_mat_form_field_4_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const _r21 = ɵngcc0.ɵɵreference(2); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onBlurring(_r21.value); })("keyup.enter", function MatSearchBarComponent_mat_form_field_4_Template_input_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const _r21 = ɵngcc0.ɵɵreference(2); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.onEnterring(_r21.value); })("focus", function MatSearchBarComponent_mat_form_field_4_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const _r21 = ɵngcc0.ɵɵreference(2); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.onFocussing(_r21.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@slideInOut", ctx_r3.searchVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.value)("placeholder", ctx_r3.placeholder);
} }
class AbstractControlValueAccessor {
    constructor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = (_) => { };
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = () => { };
    }
    /**
     * Method that is invoked on an update of a model.
     */
    updateChanges() {
        this.onChange(this.value);
    }
    /**
     * Writes a new item to the element.
     * @param value the value
     */
    writeValue(value) {
        this.value = value;
        this.updateChanges();
    }
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param fn
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param fn
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
AbstractControlValueAccessor.ɵfac = function AbstractControlValueAccessor_Factory(t) { return new (t || AbstractControlValueAccessor)(); };
AbstractControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractControlValueAccessor });


var DISPLAY_TYPE;
(function (DISPLAY_TYPE) {
    DISPLAY_TYPE[DISPLAY_TYPE["SIMPLE"] = 0] = "SIMPLE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROL"] = 1] = "FORMCONTROL";
    DISPLAY_TYPE[DISPLAY_TYPE["AUTOCOMPLETE"] = 2] = "AUTOCOMPLETE";
    DISPLAY_TYPE[DISPLAY_TYPE["FORMCONTROLANDAUTOCOMPLETE"] = 3] = "FORMCONTROLANDAUTOCOMPLETE";
})(DISPLAY_TYPE || (DISPLAY_TYPE = {}));
class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.DISPLAY_TYPE = DISPLAY_TYPE;
        this.placeholder = '';
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    ngOnInit() {
        if (!this.formControl && !this.matAutocomplete)
            this.mode = DISPLAY_TYPE.SIMPLE;
        else if (this.formControl && this.matAutocomplete)
            this.mode = DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE;
        else if (this.formControl)
            this.mode = DISPLAY_TYPE.FORMCONTROL;
        else if (this.matAutocomplete)
            this.mode = DISPLAY_TYPE.AUTOCOMPLETE;
    }
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
}
MatSearchBarComponent.ɵfac = function MatSearchBarComponent_Factory(t) { return ɵMatSearchBarComponent_BaseFactory(t || MatSearchBarComponent); };
MatSearchBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSearchBarComponent, selectors: [["mat-search-bar"]], viewQuery: function MatSearchBarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, inputs: { placeholder: "placeholder", formControl: "formControl", matAutocomplete: "matAutocomplete" }, outputs: { onBlur: "onBlur", onClose: "onClose", onEnter: "onEnter", onFocus: "onFocus", onOpen: "onOpen" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MatSearchBarComponent),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 6, consts: [[3, "ngSwitch"], ["class", "mat-search_field", 4, "ngSwitchCase"], ["class", "mat-search_field", 4, "ngSwitchDefault"], [1, "mat-search_icons"], ["matRipple", "", 1, "mat-search_icon-close", 3, "click"], ["matRipple", "", 1, "mat-search_icon-search", 3, "click"], [1, "mat-search_field"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "ngModel", "matAutocomplete", "placeholder", "ngModelChange", "blur", "keyup.enter", "focus"], ["input", ""], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "placeholder", "formControl", "blur", "keyup.enter", "focus"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "matAutocomplete", "placeholder", "formControl", "blur", "keyup.enter", "focus"], ["matInput", "", "type", "text", "autocapitalize", "none", 3, "ngModel", "placeholder", "ngModelChange", "blur", "keyup.enter", "focus"]], template: function MatSearchBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, MatSearchBarComponent_mat_form_field_1_Template, 3, 4, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(2, MatSearchBarComponent_mat_form_field_2_Template, 3, 3, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(3, MatSearchBarComponent_mat_form_field_3_Template, 3, 4, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(4, MatSearchBarComponent_mat_form_field_4_Template, 3, 3, "mat-form-field", 2);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵelementStart(6, "mat-icon", 4);
        ɵngcc0.ɵɵlistener("click", function MatSearchBarComponent_Template_mat_icon_click_6_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(7, " close ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-icon", 5);
        ɵngcc0.ɵɵlistener("click", function MatSearchBarComponent_Template_mat_icon_click_8_listener() { return ctx.open(); });
        ɵngcc0.ɵɵtext(9, " search ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.mode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.AUTOCOMPLETE);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.FORMCONTROL);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("mat-search_icons--active", ctx.searchVisible);
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ɵngcc2.MatIcon, ɵngcc3.MatRipple, ɵngcc4.MatFormField, ɵngcc5.MatInput, ɵngcc6.DefaultValueAccessor, ɵngcc7.MatAutocompleteTrigger, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc6.FormControlDirective], styles: ["[_nghost-%COMP%]{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field[_ngcontent-%COMP%]{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons[_ngcontent-%COMP%]{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons[_ngcontent-%COMP%]:hover{cursor:pointer}.mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%], .mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-search[_ngcontent-%COMP%]{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%], .mat-search_icons.mat-search_icons--active[_ngcontent-%COMP%]   .mat-search_icon-search[_ngcontent-%COMP%]{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active[_ngcontent-%COMP%]   .mat-search_icon-close[_ngcontent-%COMP%]{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"], data: { animation: [
            trigger('slideInOut', [
                state('true', style({ width: '*' })),
                state('false', style({ width: '0' })),
                transition('true => false', animate('300ms ease-in')),
                transition('false => true', animate('300ms ease-out'))
            ])
        ] } });
MatSearchBarComponent.propDecorators = {
    inputElement: [{ type: ViewChild, args: ['input',] }],
    formControl: [{ type: Input }],
    matAutocomplete: [{ type: Input }],
    placeholder: [{ type: Input }],
    onBlur: [{ type: Output }],
    onClose: [{ type: Output }],
    onEnter: [{ type: Output }],
    onFocus: [{ type: Output }],
    onOpen: [{ type: Output }]
};
const ɵMatSearchBarComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSearchBarComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSearchBarComponent, [{
        type: Component,
        args: [{
                selector: 'mat-search-bar',
                template: "<ng-container [ngSwitch]=\"mode\">\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.AUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROL\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchCase=\"DISPLAY_TYPE.FORMCONTROLANDAUTOCOMPLETE\"\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [matAutocomplete]=\"matAutocomplete\"\n      [placeholder]=\"placeholder\"\n      [formControl]=\"formControl\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n  <mat-form-field\n    *ngSwitchDefault\n    class=\"mat-search_field\"\n    [@slideInOut]=\"searchVisible\"\n  >\n    <input\n      #input\n      matInput\n      type=\"text\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder\"\n      (ngModelChange)=\"updateChanges()\"\n      (blur)=\"onBlurring(input.value)\"\n      (keyup.enter)=\"onEnterring(input.value)\"\n      (focus)=\"onFocussing(input.value)\"\n      autocapitalize=\"none\"\n    />\n  </mat-form-field>\n</ng-container>\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>\n    close\n  </mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>\n    search\n  </mat-icon>\n</span>\n",
                animations: [
                    trigger('slideInOut', [
                        state('true', style({ width: '*' })),
                        state('false', style({ width: '0' })),
                        transition('true => false', animate('300ms ease-in')),
                        transition('false => true', animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => MatSearchBarComponent),
                        multi: true
                    }
                ],
                styles: [":host{align-items:center;display:flex;flex-direction:row;height:24px;justify-content:flex-end;position:relative;width:24px}.mat-search_field{padding:0 24px 0 0;position:absolute;z-index:1}.mat-search_icons{display:block;left:0;margin:0;padding:0;position:absolute;top:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{border-radius:50%;left:0;position:absolute;top:0;transition:all .2s cubic-bezier(.4,0,.2,1);z-index:2}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;transform:rotate(1turn);visibility:visible;z-index:3}"]
            }]
    }], null, { placeholder: [{
            type: Input
        }], onBlur: [{
            type: Output
        }], onClose: [{
            type: Output
        }], onEnter: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], onOpen: [{
            type: Output
        }], inputElement: [{
            type: ViewChild,
            args: ['input']
        }], formControl: [{
            type: Input
        }], matAutocomplete: [{
            type: Input
        }] }); })();

class NgMatSearchBarModule {
}
NgMatSearchBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMatSearchBarModule });
NgMatSearchBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMatSearchBarModule_Factory(t) { return new (t || NgMatSearchBarModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            MatAutocompleteModule,
            MatIconModule,
            MatInputModule,
            MatRippleModule,
            //Reactive form
            ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMatSearchBarModule, { declarations: function () { return [MatSearchBarComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        MatAutocompleteModule,
        MatIconModule,
        MatInputModule,
        MatRippleModule,
        //Reactive form
        ReactiveFormsModule]; }, exports: function () { return [MatSearchBarComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgMatSearchBarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    MatAutocompleteModule,
                    MatIconModule,
                    MatInputModule,
                    MatRippleModule,
                    //Reactive form
                    ReactiveFormsModule
                ],
                exports: [MatSearchBarComponent],
                declarations: [MatSearchBarComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };

//# sourceMappingURL=ng-mat-search-bar.js.map